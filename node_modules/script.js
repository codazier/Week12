//Get the element for displaying the list of recipes <ul></ul>
const recipeList = document.getElementById("recipeList");

//call the function to display the exisiting list
displayRecipes();

//Listen/detect the submit button event to create a new recipe
document
  .getElementById("recipeForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const recipeNameInput = document.getElementById("recipeName");
    const recipeName = recipeNameInput.value;

    if (recipeName) {
      createRecipe(recipeName);
      recipeNameInput.value = "";
    }
  });

//The create function C in Crud
function createRecipe(recipeName) {
  fetch("http://localhost:3000/recipes", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ name: recipeName }),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log("Recipe saved successfully:", data);
      const listItem = createRecipeListItem(data);
      recipeList.appendChild(listItem);
    })
    .catch((error) => {
      console.error("Error saving recipe:", error);
    });
}

//The Read function R in cRud
function displayRecipes() {
  fetch("http://localhost:3000/recipes")
    .then((response) => response.json())
    .then((recipes) => {
      recipeList.innerHTML = "";
      recipes.forEach((recipe) => {
        const listItem = createRecipeListItem(recipe);
        recipeList.appendChild(listItem);
      });
    })
    .catch((error) => {
      console.error("Error fetching recipes:", error);
    });
}

//This is to create the <li></li> to append to our ul.
//Seperated this into a function since we need to do this when we create a recipe and when we display the list
function createRecipeListItem(recipe) {
  const listItem = document.createElement("li");
  listItem.classList.add(
    "list-group-item",
    "d-flex",
    "justify-content-between",
    "align-items-center",
  );

  const recipeName = document.createElement("span");
  recipeName.textContent = recipe.name;
  listItem.appendChild(recipeName);

  const buttonContainer = document.createElement("div");
  buttonContainer.classList.add("d-flex");

  const updateButton = document.createElement("button");
  updateButton.classList.add("btn", "btn-primary", "me-2");
  updateButton.textContent = "Update";
  updateButton.addEventListener("click", function (event) {
    event.stopPropagation();
    updateRecipeName(recipe.id, listItem);
  });
  buttonContainer.appendChild(updateButton);

  const deleteButton = document.createElement("button");
  deleteButton.classList.add("btn", "btn-danger");
  deleteButton.textContent = "Delete";
  deleteButton.addEventListener("click", function (event) {
    event.stopPropagation();
    deleteRecipe(recipe.id, listItem);
  });
  buttonContainer.appendChild(deleteButton);

  listItem.appendChild(buttonContainer);

  listItem.addEventListener("click", function () {
    updateRecipeName(recipe.id, listItem);
  });

  return listItem;
}

//The Update function U in crUd
function updateRecipeName(recipeId, listItem) {
  const newRecipeName = prompt("Enter the new recipe name:");
  if (newRecipeName) {
    fetch(`http://localhost:3000/recipes/${recipeId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name: newRecipeName }),
    })
      .then((response) => response.json())
      .then((updatedRecipe) => {
        console.log("Recipe updated successfully:", updatedRecipe);
        listItem.textContent = updatedRecipe.name;
      })
      .catch((error) => {
        console.error("Error updating recipe:", error);
      });
  }
}

//The Delete function D in cruD
function deleteRecipe(recipeId, listItem) {
  fetch(`http://localhost:3000/recipes/${recipeId}`, {
    method: "DELETE",
  })
    .then(() => {
      console.log("Recipe deleted successfully.");
      listItem.remove();
    })
    .catch((error) => {
      console.error("Error deleting recipe:", error);
    });
}